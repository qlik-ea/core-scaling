version: 2
jobs:
  build:
    docker:
      - image: google/cloud-sdk
    environment:
      TEST_CLUSTER_ZONE: europe-west3-b
    working_directory: ~/scaling
    steps:
      - checkout
      - run:
          name: Store Service Accounts
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            echo $GCLOUD_SERVICE_KEY_PROD > ${HOME}/gcloud-service-key-prod.json
      - run:
          name: Configure gcloud
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project dev-qlik-core
            gcloud --quiet config set compute/zone $TEST_CLUSTER_ZONE
      - run:
          name: Accept EULA
          command: grep -rl AcceptEULA ./qlik-core | xargs sed -i 's/AcceptEULA=no/AcceptEULA=yes/g'
      - run:
          name: Set Disk Name For Test Cluster
          command: grep -rl my-disk ./nfs-volumes | xargs sed -i "s/my-disk/$DISK_NAME_TEST-$CIRCLE_BUILD_NUM/g"
      - run:
          name: Deploy test cluster
          environment:
            GCLOUD_NUM_NODES: 2
          command: |
            GCLOUD_ZONE=$TEST_CLUSTER_ZONE K8S_CLUSTER=cci-cluster-$CIRCLE_BUILD_NUM DISK_NAME=$DISK_NAME_TEST-$CIRCLE_BUILD_NUM ./run.sh deploy
            # Wait for all deployments to rollout
            for deployment in `kubectl get deployment -o name`; do echo `kubectl rollout status $deployment`; done
      - run:
          name: Install prerequisites and run sanity tests towards the test cluster
          working_directory: ~/scaling/deployment-test
          command: |
            curl -sL https://deb.nodesource.com/setup_8.x | bash -
            apt-get -y install nodejs
            npm install
            apt-get -y install jq
            export TEST_CLUSTER_IP="$(kubectl get service ingress-nginx --namespace ingress-nginx -o json | jq -r '.status.loadBalancer.ingress[0].ip')"
            npm run test
      - run:
          name: Remove test cluster
          command: GCLOUD_ZONE=$TEST_CLUSTER_ZONE K8S_CLUSTER=cci-cluster-$CIRCLE_BUILD_NUM DISK_NAME=$DISK_NAME_TEST-$CIRCLE_BUILD_NUM ./run.sh remove
          when: always
      - run:
          name: Set Disk Name For Live Cluster
          command: grep -rl $DISK_NAME_TEST-$CIRCLE_BUILD_NUM ./nfs-volumes | xargs sed -i "s/$DISK_NAME_TEST-$CIRCLE_BUILD_NUM/$DISK_NAME_PROD/g"
      - run:
          name: Pass certificate name to ingress controller
          command: sed -i "/annotations-prefix/a \ \ \ \ \ \ \ \ \ \ \  - --default-ssl-certificate=default/scaling-backend-crt-secret" ./ingress/ingress-nginx-dep.yaml
      - run:
          name: Deploy qlik-core scaling example if on master
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key-prod.json
              gcloud --quiet config set project dev-prod-qlik-core
              gcloud --quiet container clusters get-credentials core-scaling --zone=europe-west3-a
              ./run.sh update
              POD=$(kubectl get pods --selector="role=nfs-server" -o=jsonpath='{.items[0].metadata.name}')
              kubectl exec $POD -- chown -R 1910:1910 /exports/default
            fi
      - run:
          name: Run the sanity tests toward the prod cluster (https://urbanization.qlikcore.com)
          working_directory: ~/scaling/deployment-test
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              for deployment in `kubectl get deployment -o name`; do echo `kubectl rollout status $deployment`; done
              export TEST_CLUSTER_IP="$(kubectl get service ingress-nginx --namespace ingress-nginx -o json | jq -r '.status.loadBalancer.ingress[0].ip')"
              #note TEST_CLUSTER_IP will here get the IP of the live deployed cluster.
              npm run test
            fi
